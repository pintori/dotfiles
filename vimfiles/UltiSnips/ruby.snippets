priority 0

# Helpers
global !p
import string, os

# Partially from:
#		http://inflection.readthedocs.org/en/latest/_modules/inflection.html#camelize
def camelize(underscore_word, include_modules=False):
    """
    Convert strings to CamelCase.

    Examples::

        >>> camelize("device_type")
        "DeviceType"
        >>> camelize("directory/device_type")
        "DeviceType"
        >>> camelize("directory/device_type", True)
        "Directory::DeviceType"

    :param include_modules: if set to `True` :func:`camelize` detects modules
    		in the path and includes them in the path. If set to `False` :func:`camelize`
    		uses the "basename" from the supplied path. Defaults to `False`.
    """
    if include_modules:
			words = underscore_word.split('/')
			return map(lambda w: camelize(w), words)
    else:
			underscore_word = os.path.basename(underscore_word)
			return re.sub(r"(?:^|_)(.)", lambda m: m.group(1).upper(), underscore_word)
endglobal


# -- File Templates

# TODO: For whatever reason, starting 'class_to_test' with a 'c' will put a
#		quote in the camelized version
snippet spec "spec file template" sm
require 'spec_helper'

require '${1:class_to_test}'

describe `!p snip.rv = camelize(t[1])` do
  $0
end
endsnippet


snippet specc "spec file template" sm
require 'spec_helper'

require 'controllers/${1:controller_to_test}'

describe `!p snip.rv = camelize(t[1])`, :controller do
  $0
end
endsnippet

# Templates to write:
# - Generate an interactor/spec/model given the file name and location

# -- Snippets

snippet req "require 'something'" sm
require '${1:something}'$0
endsnippet

snippet reqi "require 'interactors/'" sm
require 'interactors/${1:interactor}'$0
endsnippet

snippet reqm "require 'models/'" sm
require 'models/${1:model}'$0
endsnippet

snippet desc "describe 'something'" sm
describe '${1:method}' do
  $2
end$0
endsnippet

snippet cont "context 'something'" sm
context '${1:when/where}' do
  $2
end$0
endsnippet

snippet let "let(:something) { }" sm
let(:${1:something}) { ${2:value} }$0
endsnippet

snippet fkey "key: @object.fetch('value')" sm
${1:key}: @object.fetch('$1')$0
endsnippet

snippet error "error do" sm
error do
  e = env['sinatra.error']

  require 'pry'; binding.pry
end
$0
endsnippet

snippet subj "subject(:perform) { }" sm
subject(:${1:perform}) { ${2:do_it} }$0
endsnippet

snippet local_gem "Local trunkclub-gem" sm
gem 'trunkclub', path: '../trunkclub-gem'$0
endsnippet

# vim: ts=2 sw=2 expandtab ft=snippets:
