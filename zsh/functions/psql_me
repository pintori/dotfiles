# vi: ft=zsh

function usage() {
  echo "
usage: psql_me -u username -v environment
  repo is the name of the repository database you want to connect to, e.g. members_api (required)
  environment is the environment you want to connect to, e.g. development (default), staging or production

General options:
  -v verbose, when passed will print connection string to terminal
  -u username, username to SSH to staging/production server as, defaults to your system user
  -X Dry Run, doesn't run psql "
}

function connect_to_psql() {
  if [[ -z "$DO_NOT_RUN" ]]; then
    psql $1
  fi
}

function do_dev() {
  local dirty_db_url=`egrep -o 'DATABASE_URL=(.*)' ./development.env \
    | sed s/^DATABASE_URL=//`
  local database_url=${dirty_db_url%\?*}
  if [[ -n "$VERBOSE" ]]; then
    echo "Connecting to $database_url"
  fi

  connect_to_psql $database_url
}

function do_staging_prod() {
  if [[ "$TC_ENV" = "production" ]]; then
    ENV_PRE="prd"
  else
    ENV_PRE="stg"
  fi
  CMD="ack -o -m1 (app|prx)\d+\.$ENV_PRE.aws\d+.trunkclub.systems ./Capfile"
  SERVER=$($CMD)
  printf "Connecting to $TC_SSH_USER$SERVER (read from ./Capfile)\n"
  ENV_DAT=$(ssh $TC_SSH_USER$SERVER
    sudo -u deployer -i
    grep '\bDATABASE_URL' /var/app/$REPO/$TC_ENV.env)

  DATABASE_URL=`echo $ENV_DAT \
    | egrep -o 'DATABASE_URL=(.*)' \
    | sed -E 's/DATABASE_URL=(jdbc:)?//' \
    | sed -E 's/^(postgresql:\/\/)(.*)\?.*user=([^&]+).*&password=([^&]+).*$/\1\3:\4@\2/'`

  if [[ "$TC_ENV" = "production" ]]; then
    echo "*** YOU ARE CONNECTING TO A PRODUCTION DATABASE, EXERCISE GOOD JUDGEMENT ***n"
    echo "!!! FOR SERIOUS, DON'T GET YOURSELF FIRED !!!"
  fi
  if [[ -n "$VERBOSE" ]]; then
    echo "Connecting to $DATABASE_URL"
  fi

  connect_to_psql $DATABASE_URL
}

function psql_me() {
  while getopts :u:vX opt; do
    case $opt in
      u)
        TC_SSH_USER="$OPTARG"
        ;;
      v)
        VERBOSE=1
        ;;
      X)
        DO_NOT_RUN=1
        ;;
      \?)
        echo "Invalid option: -$OPTARG"
        usage
        return 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument"
        usage
        return 1
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -n $1 ]]; then
    TC_ENV=$1
  else
    TC_ENV="development"
  fi

  if [[ -n "$TC_SSH_USER" ]]; then
    TC_SSH_USER="$TC_SSH_USER@"
  fi

  printf "Running psql for $REPO ($TC_ENV)\n"

  if [[ "$TC_ENV" == "development" ]]; then
    do_dev
  else
    do_staging_prod
  fi
}

psql_me "$@"
